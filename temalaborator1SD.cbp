#include <iostream>
#include <bits/stdc++.h>
using namespace std;
void countsort(int *v,int &n)
{
    int x=0,i,k=0;
    for(i=0; i<n; i++)
        if(v[i]>x)
            x=v[i];
    int w[x+1];
    for(i=0; i<=x; i++)
        w[i]=0;
    for(i=0; i<n; i++)
        w[v[i]]++;
    for(i=0; i<=x; i++)
        if(w[i]>0)
            while(w[i]!=0)
            {
                v[k++]=i;
                w[i]--;
            }
}
void bubblesort(int*v,int&n)
{
    if(n<100000)
    {
        for(int i=0; i<n-1; i++)
            for(int j=0; j<n-i-1; j++)
                if(v[j]>v[j+1])
                    swap(v[j],v[j+1]);
    }

    else
        cout<<"Too many numbers for bubblesort";
}
void mergesort(int *v,int st, int dr)
{
    if(st<dr)
    {
        int mij=(st+dr)/2;
        mergesort(v,st,mij);
        mergesort(v,mij+1,dr);
        int i=st,j=mij+1,k=0,w[dr];
        while(i<=mij and j<=dr)
        {
            if(v[i]<v[j])
            {
                w[k]=v[i];
                k++;
                i++;
            }
            else
            {
                w[k]=v[j];
                k++;
                j++;
            }
        }
        while(i<=mij)
        {
            w[k]=v[i];
            k++;
            i++;
        }
        while(j<=dr)
        {
            w[k]=v[j];
            k++;
            j++;
        }
        j=0;
        for(i=st; i<=dr; i++)
        {
            v[i]=w[j];
            j++;
        }
    }
}
void insertionsort(int*v,int&n)
{
    int k,i,j;
    for(i=1; i<n; i++)
    {
        k=v[i];
        j=i-1;
        while(j>=0 and v[j]>k)
        {
            v[j+1]=v[j];
            j--;
        }
        v[j+1]=k;
    }
}
int separare(int v[],int st, int dr )
{
    int pivot=v[dr];
    int i=st;
    for(int j=st; j<=dr-1; j++)
        if(v[j]<pivot)
        {
            swap(v[j],v[i]);
            i++;
        }
    swap(v[i],v[dr]);
    return i;
}
void quicksort(int*v,int st,int dr)
{
    if(st<dr)
    {
        int pivotul=separare(v,st,dr);
        quicksort(v,st,pivotul-1);
        quicksort(v,pivotul+1,dr);
    }

}
int maxim(int*v,int&n)
{
    int maxx=v[0];
    for(int i=1; i<n; i++)
        if(v[i]>maxx)
            maxx=v[i];
    return maxx;
}
void countsort_radix(int*v,int&n,int pozitie)
{
    int rez[n];
    int i,nr[10]= {0};
    for(i=0; i<n; i++)
        nr[(v[i]/pozitie)%10]++;
    for(i=1; i<10; i++)
        nr[i]=nr[i]+nr[i-1];
    for(i=n-1; i>=0; i--)
    {
        rez[nr[(v[i]/pozitie)%10]-1]=v[i];
        nr[(v[i]/pozitie)%10]--;
    }
    for(i=0; i<n; i++)
        v[i]=rez[i];
}
void radixsort(int*v,int&n)
{
    int maximul=maxim(v,n);
    int pozitie=1;
    while(maximul/pozitie>0)
    {
        countsort_radix(v,n,pozitie);
        pozitie=pozitie*10;
    }
}
void verificare(int *v,int &n)
{
    int ok=1;
    for(int i=0; i<n-1; i++)
        if(v[i]>v[i+1])
        {
            ok=0;
            break;
        }
    if(ok==1)
        cout<<"sorted"<<'\n';
    else
        cout<<"not sorted"<<'\n';
}
int n,i,x,t,j;
int main()
{
    cin>>t;
    for(j=0; j<t; j++)
    {
        cin>>n>>x;
        int v[n];
        srand((unsigned) time(0));
        for(i=0; i<=n; i++)
            v[i]=(rand()%x)+1;
        clock_t start,end;
        start=clock();
        //countsort(v,n);
        //bubblesort(v,n);          //am apelat toate functiile de sortare, trebuie doar decomentate la rulare
        //mergesort(v,0,n-1);
        //insertionsort(v,n);
        quicksort(v,0,n-1);
        //radixsort(v,n);
        end=clock();
        double duration=double(end-start) / double(CLOCKS_PER_SEC);
        for(i=0; i<n; i++)
            cout<<v[i]<<" ";
        cout<<endl<<"Time taken by sorting function is "<<fixed<<duration<<setprecision(5);
        cout<<" sec"<<endl;
        verificare(v,n);
    }
}
